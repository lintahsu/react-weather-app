{"version":3,"sources":["App.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","date","toLocaleDateString","weekday","year","month","day","DateBuilder","Date","Math","round","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LACMA,EACC,mCADDA,EAEE,2CAmEOC,MAjEf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KAwBA,OACE,qBAAKC,UACqB,oBAAhBF,EAAQG,MACVH,EAAQG,KAAKC,KAAO,GACpB,WACF,MAJN,SAOE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WAtCK,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJnB,EAAS,IACTE,EAAWiB,GACXC,QAAQC,IAAIF,WAmCW,oBAAhBlB,EAAQG,KACf,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,WACvD,qBAAKrB,UAAU,OAAf,SAlCQ,SAACsB,GACnB,IAMIC,EAAOD,EAAEE,mBAAmB,QANlB,CACZC,QAAS,OACTC,KAAM,UACNC,MAAO,OACPC,IAAK,YAGP,MAAM,GAAN,OAAUL,GA0BuBM,CAAY,IAAIC,WAEzC,sBAAK9B,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACG+B,KAAKC,MAAMlC,EAAQG,KAAKC,MAD3B,WAGA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGG,aAG9C,SC3DbgC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.ec796d4c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nconst api = {\n  key: 'f9b5b46af25c4c49853d2c2583d427d6',\n  http: 'https://api.openweathermap.org/data/2.5/'\n}\nfunction App() {\n  const [query, setQuery] = useState('')\n  const [weather, setWeather] = useState({})\n\n  const search = evt => {\n    if (evt.key === 'Enter') {\n      fetch(`${api.http}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setQuery('')\n          setWeather(result)\n          console.log(result);\n        })\n    }\n  }\n\n  const DateBuilder = (d) => {\n    var options = {\n      weekday: 'long',\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    }\n    let date = d.toLocaleDateString(\"en-US\", options)\n    return `${date}`\n  }\n  return (\n    <div className={\n      (typeof weather.main != 'undefined')\n        ? ((weather.main.temp > 15)\n          ? 'App warm' : 'App')\n        : 'App'\n    }>\n      {/* use class 'App when location is not definied or the weather is under 16, else use class 'App + warm' */}\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {/* The result shows only when the weather is defined*/}\n        {(typeof weather.main != 'undefined') ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{DateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                {Math.round(weather.main.temp)}Â°C\n            </div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : ('')}\n      </main>\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}